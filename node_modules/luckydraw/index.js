(function(){

    let CJ={
        CJout:null,
        CJoutList:[]
    }

// 定量定员模式 --- 参数：抽奖状态,总人数，是否允许重复抽奖
function jPgetNumber(CJre,number,repeat){
if(repeat){
    let rand=Math.floor(Math.random()*number)+1;
    CJre.CJout=rand;
    return CJre;
}else{
    let  rand=Math.floor(Math.random()*number)+1;
    if(CJre.CJoutList.includes(rand)){return jPgetNumber(number,repeat)
    }else{ CJre.CJout=rand;CJre.CJoutList.push(rand);return CJre;}
}
}

// 测试定员定量(测试次数，抽奖状态，参与人数，是否允许重复抽奖)
let test_jPgetNumber=function(testNumber,CJre,fnNumber,repeat){
    console.log('—————定员定量模式测试结果—————')
    for(i=1;i<=testNumber;i++){
        let re=jPgetNumber(CJre,fnNumber,repeat)
        console.log('测试第'+i+'轮：',re.CJout)
    }
    console.log('—————----END-----—————')
}

// -----------------------------------------------

// 人均成本模式
function jPgetEvPrice(priceList,evPrice) {
     // 参数判断正确性（为了保证数据的精准度，参数做了一定限制，超出请自行测试选择使用）
    priceList.sort(function (a, b) {return a-b;}); 
        let max =priceList[priceList.length-1]
        if(max<evPrice){return 0;}
    // 数组的重组
    let len=priceList.length;
    let rand1=Math.floor(Math.random()*priceList.length);
    // 进行再分组
    if(priceList[rand1]<evPrice){
        // 进行再分配
        tRand=Math.floor(Math.random()*(evPrice/priceList[rand1])*len)
        let tList=[];
        for(x of priceList){if(x>=evPrice){tList.push(x)}}
        if(tRand){return jPgetEvPrice(tList,evPrice)}else{return priceList[rand1]}
    }else{
        let rand2=Math.floor((Math.random()*priceList[rand1])/evPrice);
        if (rand2){return 0;}else {return priceList[rand1];}
    }
}

// 测试人均成本模式 --- 参数：测试次数，人均成本
let test_jPgetEvPrice=function(number,priceList,cost){
    console.log('—————人均成本模式测试结果—————');
    let numberList=Array.from(priceList,x=>0);
    for(i=1;i<=number;i++){
        let re=jPgetEvPrice(priceList,cost);
        if(re===0){}else{numberList[priceList.indexOf(re)]++}
    }
    console.log(priceList,numberList)
    let resPrice=0;
    for(j=0;j<priceList.length;j++){resPrice+=(priceList[j]*numberList[j]);}
    console.log('总成本：'+resPrice,'人均成本：'+resPrice/number)
    console.log('—————----END-----—————')
}

// --------------------------------------------
// 定量不定员模式
let JP={
    priceLsit:[10,20,30,50,100],
    numberList:[100,50,10,5,1],
    lastList:[100,50,10,5,1],
    lastGet:false
}
// 起始时间
let JPstartTime=new Date(2019,2,28,16,0,0)
let JPendTime=new Date(2019,3,1,20,0,0)

// 数组求和方法
function getSum(ar){ var s = 0;ar.forEach((val)=> {s += val;}, 0);return s;};  

// 定量不定员模式
// 参数：奖品状态对象，开始时间，结束时间，是否大奖延迟
function jPgetRation(JP,startTime,endTime,delay){
    // 按奖品个数分时间段
    let allLuckyNumber=getSum(JP.numberList);//所有奖品数量之和
    let allLuckyLast=getSum(JP.lastList);//剩余奖品数量之和
    let allLuckyGet=allLuckyNumber-allLuckyLast;//已出奖品之和
    let bitTime=Math.floor((endTime-startTime)/allLuckyNumber);//每段的时间
    let nowDate=new Date();//现在时间

    if(delay){

    
    }else{
    // 判断是否是必出事件
    function getOk(){
        // 出奖数小于该时间所属于的时间段数
        // 该时间所属时间段
        let duan=Math.floor((nowDate-startTime)/bitTime)+1
        if(duan>=allLuckyGet){
            return true;
        }else{return false}
    }
    // 抽中后选奖品事件
    function choseJp(){
         // 选奖品,随机奖品下标
            // 排除已抽完的奖品
            let hasList=[];
            for(let [index,elem] of JP.lastList.entries()){
                if(elem){hasList.push(index);}
            }
              let rand2=Math.floor(Math.random()*hasList.length)
              let rand3=hasList[rand2]
              let jiangpin=JP.priceLsit[rand3];
              JP.lastGet=true;
              JP.lastList[rand3]--;
              return {re:jiangpin,JP:JP}
    };

        if(getOk){
  return  choseJp();
}else{

// 取余数（现在时间减开始时间除时间段）
let yushu=bitTime-((nowDate-startTime)%bitTime)
// 开始取随机数
let  rand=Math.floor(Math.random()*yushu)+1;
if(rand==1){// 抽中 
  return  choseJp();
}
}
}
}


// 测试定量不定员模式
let test_jPgetRation=function(evTime,JP,JPstartTime,JPendTime,bigYan){
    console.log('—————定量不定员模式测试结果—————');
    let theRes=null;
    setInterval(function(){
        let res=jPgetRation(JP,JPstartTime,JPendTime,bigYan);
        console.log(res.re);
        console.log('奖品价格：'+theRes.JP.priceLsit)
        console.log('剩余奖品：'+theRes.JP.lastList)
        theRes=res;},evTime)
}


// ------------------------------------

module.exports.jPgetNumber= jPgetNumber;
module.exports.jPgetRation= jPgetRation;
module.exports.jPgetEvPrice= jPgetEvPrice;

module.exports.test_jPgetNumber= test_jPgetNumber;
module.exports.test_jPgetRation= test_jPgetRation;
module.exports.test_jPgetEvPrice= test_jPgetEvPrice;

})()
