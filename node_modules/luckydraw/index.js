(function(){
    let CJre={
        CJout:null,
        CJoutList:[]
    }

// 定量定员模式 --- 参数：总人数，是否允许重复抽奖
function jPgetNumber(number,repeat){
if(repeat){
    let rand=Math.floor(Math.random()*number)+1;
    CJre.CJout=rand;
    return CJre;
}else{
    let  rand=Math.floor(Math.random()*number)+1;
    if(CJre.CJoutList.includes(rand)){return jPgetNumber(number,repeat)
    }else{ CJre.CJout=rand;CJre.CJoutList.push(rand);return CJre;}
}
}

// 测试定员定量(测试次数，参与人数，是否允许重复抽奖)
let test_jPgetNumber=function(testNumber,fnNumber,repeat){
    console.log('—————定员定量模式测试结果—————')
    for(i=1;i<=testNumber;i++){
        let re=jPgetNumber(fnNumber,repeat)
        console.log('测试第'+i+'轮：',re.CJout)
    }
    console.log('—————----END-----—————')
}

// -----------------------------------------------

// 人均成本模式
function jPgetEvPrice(priceList,evPrice) {
     // 参数判断正确性（为了保证数据的精准度，参数做了一定限制，超出请自行测试选择使用）
    priceList.sort(function (a, b) {return a-b;}); 
        let max =priceList[priceList.length-1]
        if(max<evPrice){return 0;}
    // 数组的重组
    let len=priceList.length;
    let rand1=Math.floor(Math.random()*priceList.length);
    // 进行再分组
    if(priceList[rand1]<evPrice){
        // 进行再分配
        tRand=Math.floor(Math.random()*(evPrice/priceList[rand1])*len)
        let tList=[];
        for(x of priceList){if(x>=evPrice){tList.push(x)}}
        if(tRand){return jPgetEvPrice(tList,evPrice)}else{return priceList[rand1]}
    }else{
        let rand2=Math.floor((Math.random()*priceList[rand1])/evPrice);
        if (rand2){return 0;}else {return priceList[rand1];}
    }
}

// 测试人均成本模式 --- 参数：测试次数，人均成本
let test_jPgetEvPrice=function(number,priceList,cost){
    console.log('—————人均成本模式测试结果—————');
    let numberList=Array.from(priceList,x=>0);
    for(i=1;i<=number;i++){
        let re=jPgetEvPrice(priceList,cost);
        if(re===0){}else{numberList[priceList.indexOf(re)]++}
    }
    console.log(priceList,numberList)
    let resPrice=0;
    for(j=0;j<priceList.length;j++){resPrice+=(priceList[j]*numberList[j]);}
    console.log('总成本：'+resPrice,'人均成本：'+resPrice/number)
    console.log('—————----END-----—————')
}

// --------------------------------------------
// 定量不定员模式
// 参数：奖品，活动时间，是否均衡出奖，是否大奖延后
function jPgetRation(priceList,theTime,ave,delay){
    let nowData=new Date;
console.log(nowData)
    if(ave){

    }else{

    }
}

// 测试定量不定员模式
let test_jPgetRation=function(number,priceList,theTime,ave,delay){
    console.log('—————定量不定员模式测试结果—————');
    for(i=1;i<=number;i++){

    }
}
// ------------------------------------
module.exports.CJre= CJre;
module.exports.jPgetNumber= jPgetNumber;
module.exports.jPgetRation= jPgetRation;
module.exports.jPgetEvPrice= jPgetEvPrice;

module.exports.test_jPgetNumber= test_jPgetNumber;
module.exports.test_jPgetRation= test_jPgetRation;
module.exports.test_jPgetEvPrice= test_jPgetEvPrice;

})()
